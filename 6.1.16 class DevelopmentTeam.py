# region description
"""
Реализуйте класс DevelopmentTeam, описывающий команду разработчиков двух уровней: junior (младший) и senior (старший).
При создании экземпляра класс не должен принимать никаких аргументов.

Класс DevelopmentTeam должен иметь два метода экземпляра:

add_junior() — метод, принимающий произвольное количество позиционных аргументов,
каждый из которых является именем разработчика, и добавляющий их в число junior-разработчиков

add_senior() — метод, принимающий произвольное количество позиционных аргументов,
каждый из которых является именем разработчика, и добавляющий их в число senior-разработчиков

Экземпляр класса DevelopmentTeam должен быть итерируемым объектом,
элементами которого сперва являются все его junior-разработчики,
а затем — все senior-разработчики.
Junior-разработчики должны быть представлены в виде кортежей: (<имя разработчика>, 'junior')
в то время как senior-разработчики — в виде кортежей: (<имя разработчика>, 'senior')
"""
# endregion


class DevelopmentTeam:
    def __init__(self):
        self.j = []
        self.s = []

    def add_junior(self, *args):
        for arg in args:
            self.j.append((arg, "junior"))

    def add_senior(self, *args):
        for arg in args:
            self.s.append((arg, "senior"))

    def __iter__(self):
        yield from self.j + self.s
